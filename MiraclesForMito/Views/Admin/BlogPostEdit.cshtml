@using MiraclesForMito.Models;
@model BlogPost

@{
	ViewBag.Title = "Edit Blog Post";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
	ViewBag.Active = "blog";
	BlogPost modelToUse = Model;
	bool bIsCreate = false;
	
	// Model
	if (modelToUse == null)
	{
		modelToUse = new BlogPost(){ ID = -1 };
		bIsCreate = true;
		ViewBag.Title = "Create Blog Post";
	}

	SiteDB db = new SiteDB();
}

<h1>@ViewBag.Title</h1>

<div class="row main-page-section">
	<div class="col-md-12 col-lg-10 col-md-offset-0 col-lg-offset-1">

		<div class="row">
			<div class="col-md-12 col-lg-12">
				<form id="BlogPostEditForm" action="~/API/BlogPost/" method="put" class="form-horizontal" role="form">

					<input type="hidden" id="id" name="id" value="@modelToUse.ID" />

					<div class="form-group">
						<label for="Name" class="col-sm-2 control-label">Name</label>
						<div class="col-sm-10">
							<input type="text" class="form-control" id="Title" name="title" placeholder="Title" value="@modelToUse.Title" />
						</div>
					</div>

					<div class="form-group">
						<label for="Author" class="col-sm-2 control-label">Author</label>
						<div class="col-sm-10">
							<input type="text" class="form-control" id="Author" name="author" placeholder="Author" value="@modelToUse.Author" />
						</div>
					</div>

					<div class="form-group">
						<label for="SEOLink" class="col-sm-2 control-label">SEO Link</label>
						<div class="col-sm-10">
							<div class="input-group">
								<span class="input-group-addon">http://@(Request.Url.Host)/Blog/Post/</span>
								<input type="text" class="form-control disabled" id="SEOLink" name="SEOLink" placeholder="" value="@modelToUse.SEOLink" readonly />
							</div>
						</div>
					</div>

					<div class="form-group">
						<label for="Content" class="col-sm-2 control-label">Content</label>
						<div class="col-sm-10">
							<textarea class="form-control" id="Content" name="content" placeholder="Content">@(modelToUse.Content ?? "")</textarea>
							<textarea class="form-control hide" id="ContentRaw" name="ContentRaw" placeholder="Content">@(modelToUse.ContentRaw ?? "")</textarea>
						</div>
					</div>

					<div class="form-group">
						<label for="LinkedEventID" class="col-sm-2 control-label">Linked Event</label>
						<div class="col-sm-10">
							<select id="LinkedEventID" name="LinkedEventID" class="form-control @if (db.Events.Count() == 0) {@("disabled")}" @if (db.Events.Count() == 0) {@("disabled")}>
								@if (db.Events.Count() > 0)
								{
									<option value="">No event link</option>
								}
								else
								{
									<option value="">No events available</option>
								}
								@foreach (Event mitoEvent in db.Events)
								{
									<option value="@mitoEvent.ID" @if(modelToUse.LinkedEvent != null && mitoEvent.ID == modelToUse.LinkedEvent.ID) { @Html.Raw("selected=\"selected\""); }>@mitoEvent.Name</option>
								}
							</select>
						</div>
					</div>

					<div class="form-group">
						<label for="Published" class="col-sm-2 control-label">Published</label>
						<div class="col-sm-10">
							<input id="Published" name="Published" type="checkbox" @if (modelToUse.Published.GetValueOrDefault(false)) { @("checked"); } />
							<span class="help-block">Toggle the checkbox above to determine whether or not the blog post shows up on the site.</span>
						</div>
					</div>
			
					<div class="form-group">
						<div class="col-sm-offset-2 col-sm-10">
							<button type="submit" class="btn btn-success">@(bIsCreate ? "Save Blog Post" : "Save Changes")</button>
							<button id="CancelChanges" type="button" class="btn btn-danger">Cancel</button>
						</div>
					</div>

				</form>
			</div>
		</div>

	</div>
</div>

@section scripts{
	<script type="text/javascript">
		$(function ()
		{
			var jEventEditForm = $("#BlogPostEditForm");
			var $seoLinkInput = $("#SEOLink");
			var iSEOUrlCharacterCutOff = 60;

			// need to make sure they didn't accidently click on cancel
			$("#CancelChanges").on("click", function(){
				// launch simple confirm
				var bConfirmCancel = confirm("Are you sure you want to cancel? Any changes made will not be saved.");

				// if they actually want to quite just take them back to the view all page
				if(bConfirmCancel)
				{
					window.location = "~/Admin/BlogPosts".ResolveUrl();
				}
			});

			$("#Title").on(
				"keyup",
				function()
				{
					setSEOLinkValFromTitle($(this).val(), true);
				}
			);

			var setSEOLinkValFromTitle = function(sVal, bCleanUpTrailingHyphens)
			{
				// if it has a value we will clean up the title and turn it into a more SEO friendly link
				if(sVal)
				{
					// we only want letters, numbers, hyphens and spaces
					var sanitizeRE = /[^A-Za-z0-9 \-]/gi;

					// sanitize the value
					var sSanitized = sVal.replace(sanitizeRE, "");

					// we want the urls to have dashes instead of spaces to make them more SEO Friendly
					var sSEOFriendly = sSanitized.replace(/ /g, "-");

					// we don't want the url to be longer than 60 characters
					sSEOFriendly = sSEOFriendly.substring(0, iSEOUrlCharacterCutOff);

					// if the last character is 
					if(!bCleanUpTrailingHyphens && sSEOFriendly.lastIndexOf("-") == (sSEOFriendly.length - 1))
					{
						sSEOFriendly = sSEOFriendly.substring(0, (sSEOFriendly.length - 1));
					}

					// replace multiple hyphen instances
					sSEOFriendly = sSEOFriendly.replace(/-{2,}/g,"-");

					// set the SEO Link value to the sanitized string replacing any spaces with dashes
					$seoLinkInput.val(sSEOFriendly);
				}
				else if(!sVal)
				{
					$seoLinkInput.val("");
				}
			};

			jEventEditForm.submit(function (e)
			{
				e.preventDefault();

				var sUrl = "~/API/BlogPost/".ResolveUrl();
				var sAction = "PUT";
				// written from serverside.
				var bIsCreate = @bIsCreate.ToString().ToLower();
				var sSuccesMessage = "Updated!";
				var sFailMessage = "Failed to update!";

				if (bIsCreate)
				{
					sAction = "POST";
					sSuccesMessage = "Created!";
					sFailMessage = "Failed to create!";
				}
				else
				{
					sUrl += $('#id').val();
				}

				var sTinyMCEContent = tinymce.activeEditor.getContent();

				//set the value to the content of the tinyMCE editor
				$("#Content").val(sTinyMCEContent);
				
				var sRawContent = $("<div></div>").html(sTinyMCEContent).text();

				// get the raw text
				$("#ContentRaw").val(sRawContent);
				
				// serialize it all
				var ajaxData = jEventEditForm.serialize();

				// the serialize method doesn't specify true or false so this is a quick fix for that
				ajaxData = ajaxData.replace("Published=on", "Published=true").replace("Published=off", "Published=false");

				$.ajax({
					url: sUrl,
					type: sAction,
					data: ajaxData
				})
				.done(
					function ()
					{
						alert(sSuccesMessage);
						window.location = "~/Admin/BlogPosts".ResolveUrl();
					}
				)
				.fail(function () { alert(sFailMessage) });
			});

			// the base url in hosted environments gets a little screwy
			tinyMCE.baseURL = '~/Scripts/tinymce'.ResolveUrl();

			tinymce.init({
				selector: "#Content",
				plugins: [
					"advlist autolink lists link image charmap print preview anchor",
					"searchreplace visualblocks code fullscreen",
					"insertdatetime media table contextmenu paste"
				],
				height: 300,
				menubar: false,
				toolbar: "undo redo | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
			});
		});
	</script>
}